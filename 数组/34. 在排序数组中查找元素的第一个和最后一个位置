题目：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

知识点：
1.有序数组二分法
2.边界值 注意n=1
3. if(first >= 0){
      while(first >= 0 && nums[first] == target ){
           first = first - 1;
       }
   }
   使用这种方式才能避免first小于零是溢出的可能，注意first的位置要在前面
   
答案：
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        vector<int> v;
        if(n==1){
            if(nums[0]==target) {
                v.push_back(0);
                v.push_back(0); 
                return v;
            }
            else{
                v.push_back(-1);
                v.push_back(-1); 
                return v;       
            }
        }
        int l = 0, r = n-1, first=-1, last=-1, mid=0, flag=0;
        while(l <= r){
            mid = (l+r)/2;
            if(nums[mid]==target) {
                flag = 1;
                break;
            }
            else if(nums[mid] < target) {
                l = mid+1;
            }
            else {
                r = mid-1;
            }
        }

        if(flag==0){
            v.push_back(-1);
            v.push_back(-1); 
            return v;
        }

        first = mid - 1;
        last = mid + 1; 
        
        if(first >= 0){
            while(first >= 0 && nums[first] == target ){
                first = first - 1;
            }
        }
        if(last <= n-1){
            while(last <= n-1 && nums[last] == target){
                last = last + 1;
            }
        }
        v.push_back(first+1);
        v.push_back(last-1); 
        return v;
    }
};
