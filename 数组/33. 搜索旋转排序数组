https://leetcode-cn.com/problems/search-in-rotated-sorted-array/submissions/
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
你可以假设数组中不存在重复的元素。
你的算法时间复杂度必须是 O(log n) 级别。
示例 1:
输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:
输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

知识点：
1.遇到有序数组，遇到logn，就要想到二分查找
2.^在c++中表示异或 同真同假为0
3.遍历可能性
三种可能需要l=mid-1 
456 7 123 0 < tar(5) < mid
670 1 234 tar(0) < mid < 0
670 1 234 mid < 0 < tar(7)

特别的 
[1,3,5] 1
[5,3,1] 5
这两个 需要在0和tar之间加入等号
[1,3] 3
需要在l和r间加入等号

答案：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n-1;
        if(n == 1) {
            if(nums[0]==target) return 0;
            else return -1;
        }
        while(l <= r){
            int mid = (l+r)/2;

            if(nums[mid] == target) return mid;

            if(nums[0] <= target && target < nums[mid]) r = mid - 1;

            else if(nums[mid] < nums[0] && nums[0] <= target ) r = mid - 1;

            else if(target < nums[mid]  && nums[mid] < nums[0] ) r = mid - 1;
           
            else l = mid + 1;
        }
        return -1;
    }
};
