题目地址：https://leetcode-cn.com/problems/two-sum/

知识：
1. map:
  map[key] = x
  map -> first
  map -> second
2.map的插入：
  第一种 map.insert（pair<,>()）这种方式如果key有重复，则无法插入
  第二种 map[i] = num 这种方式key有重复，则直接覆盖
3.map的find函数
  如果查找不到，find会返回map.end()
  如果查找到了。会返回迭代器，迭代器的写法是 map<,>::iterator it = map.find(key)  
4.思路
  用空间换时间，借用一个map且保持和原vector顺序相同
  从问题出发，改为查找target-num1来寻找num2
  边插入边检查，这样就会减少一次迭代
答案：
两次迭代：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
           int n = nums.size();
           vector<int> v;
           map<int,int> m;
           for(int i = 0; i < n; ++i){
               m.insert(pair<int,int>(nums[i],i));
              //m[i] = nums[i];
           }
           for(int i = 0; i < n; ++i){
               int aim = target - nums[i];
               map<int,int>::iterator iter = m.find(aim);
               if(iter != m.end()){
                    if( iter->second != i) {
                        v.push_back(i>iter->second?iter->second:i);
                        v.push_back(i<iter->second?iter->second:i);
                        return v;
                    }
               }
               
           }
           return v;
    }
};
一次迭代：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
           int n = nums.size();
           vector<int> v;
           map<int,int> m;
           for(int i = 0; i < n; ++i){
               int aim = target - nums[i];
               m.insert(pair<int,int>(nums[i],i));
               map<int,int>::iterator iter = m.find(aim);
               if(iter != m.end()){
                    if( iter->second != i) {
                        v.push_back(i>iter->second?iter->second:i);
                        v.push_back(i<iter->second?iter->second:i);
                        return v;
                    }
               }
              //m[i] = nums[i];
           }
           return v;
    }
}；
