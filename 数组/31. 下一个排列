题目：https://leetcode-cn.com/problems/next-permutation/
实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
必须原地修改，只允许使用额外常数空间。
以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

答案：
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        if(n>1){//只有一个数的时候不需要改变
            if(n<3) sort(nums.begin(),nums.end());// 只有两个的时候必然输出顺序数组
            int i = n-2, j = n-1;
            while(nums[i]>=nums[j] && i>0){ // >= 而不是 >
                --i;
                --j;
            }
            if(i == 0 && nums[i] > nums[j]) {
                sort(nums.begin(),nums.end());
            } 
            else {
                int k;
                for(k = n-1; k>j;--k){
                    if(nums[k] > nums[i]) break;
                }//应该找一个比i大的进行交换而不是最后一个
                int temp = nums[i];
                nums[i] = nums[k];
                nums[k] = temp;          
                sort(nums.begin()+i+1,nums.end());
            }
        }
        
    }
};
