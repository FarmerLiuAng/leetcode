https://leetcode-cn.com/problems/n-queens/
n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

上图为 8 皇后问题的一种解法。

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。
输入：4
输出：[
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法

知识点：
1.二维的初始化 vector<string> track(n,string(n,'.'));
2.传参必须要加& 否则不会对原数进行修改，而且传参不能是空值
3.比较全排列，区别在于需要一个row来确定到达了棋盘的第几行


答案：
class Solution {
public:
    vector<vector<string>> v;
    vector<vector<string>> solveNQueens(int n) {    
        vector<string> track(n,string(n,'.'));  
        trackback(track,n,0);
        return v;
    }
     bool isValid(int row, int col, vector<string>& track){
        int n = track.size();
        for(int i = 0; i < n;++i){
            if(track[i][col] == 'Q') return false;
        }
        for(int i=row-1,j=col-1;i>=0&&j>=0;--i,--j){
            if(track[i][j]=='Q') return false;
        }
        for(int i=row-1,j=col+1;i>=0&&j<n;--i,++j){
            if(track[i][j]=='Q') return false;
        }
        return true;
    }
    void trackback(vector<string> track,int n,int row){
        if(row == n){
            v.push_back(track);
            return;
        }
        for(int col = 0; col< n; ++col){
            
                if(!isValid(row,col,track)) {
                    continue;
                }

                track[row][col] = 'Q';
                trackback(track,n,row+1);
                track[row][col] = '.';
            }
            
            
        }

   

};
